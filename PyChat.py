# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PyChat.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import socket
import threading
import time

class Ui_MainWindow(QtWidgets.QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 400)
        MainWindow.setFixedSize(MainWindow.size())
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 351, 381))
        self.groupBox.setObjectName("groupBox")
        self.txtInIP = QtWidgets.QLineEdit(self.groupBox)
        self.txtInIP.setGeometry(QtCore.QRect(20, 30, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.txtInIP.setFont(font)
        self.txtInIP.setAlignment(QtCore.Qt.AlignCenter)
        self.txtInIP.setObjectName("txtInIP")
        self.btnConnect = QtWidgets.QPushButton(self.groupBox)
        self.btnConnect.setGeometry(QtCore.QRect(20, 100, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnConnect.setFont(font)
        self.btnConnect.setObjectName("btnConnect")
        self.btnHost = QtWidgets.QPushButton(self.groupBox)
        self.btnHost.setGeometry(QtCore.QRect(20, 160, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnHost.setFont(font)
        self.btnHost.setObjectName("btnHost")
        self.btnDisconnect = QtWidgets.QPushButton(self.groupBox)
        self.btnDisconnect.setGeometry(QtCore.QRect(20, 220, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnDisconnect.setFont(font)
        self.btnDisconnect.setObjectName("btnDisconnect")
        self.btnDisconnect.setEnabled(False)
        self.txtOutStatus = QtWidgets.QLineEdit(self.groupBox)
        self.txtOutStatus.setGeometry(QtCore.QRect(20, 290, 311, 71))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txtOutStatus.setFont(font)
        self.txtOutStatus.setAlignment(QtCore.Qt.AlignCenter)
        self.txtOutStatus.setReadOnly(True)
        self.txtOutStatus.setObjectName("txtOutStatus")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(380, 10, 411, 381))
        self.groupBox_2.setObjectName("groupBox_2")
        self.txtOutChat = QtWidgets.QTextBrowser(self.groupBox_2)
        self.txtOutChat.setGeometry(QtCore.QRect(10, 20, 391, 271))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txtOutChat.setFont(font)
        self.txtOutChat.setObjectName("txtOutChat")
        self.txtInMsg = QtWidgets.QLineEdit(self.groupBox_2)
        self.txtInMsg.setGeometry(QtCore.QRect(10, 309, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txtInMsg.setFont(font)
        self.txtInMsg.setObjectName("txtInMsg")
        self.btnSend = QtWidgets.QPushButton(self.groupBox_2)
        self.btnSend.setGeometry(QtCore.QRect(290, 310, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.btnSend.setFont(font)
        self.btnSend.setObjectName("btnSend")
        self.btnSend.setEnabled(False)
        MainWindow.setCentralWidget(self.centralwidget)
        #Buttons
        self.btnHost.clicked.connect(self.start_server)
        self.btnDisconnect.clicked.connect(self.disconnect)
        self.btnConnect.clicked.connect(self.connect_to_server)
        self.btnSend.clicked.connect(self.send_to_server)
        self.txtInMsg.returnPressed.connect(self.send_to_server)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PyChat"))
        self.groupBox.setTitle(_translate("MainWindow", "SERVER"))
        self.txtInIP.setPlaceholderText(_translate("MainWindow", "IP-Address"))
        self.btnConnect.setText(_translate("MainWindow", "CONNECT TO SERVER"))
        self.btnHost.setText(_translate("MainWindow", "HOST SERVER"))
        self.btnDisconnect.setText(_translate("MainWindow", "DISCONNECT"))
        self.txtOutStatus.setPlaceholderText(_translate("MainWindow", "Status"))
        self.groupBox_2.setTitle(_translate("MainWindow", "CHAT"))
        self.txtInMsg.setPlaceholderText(_translate("MainWindow", "Your Message"))
        self.btnSend.setText(_translate("MainWindow", "SEND"))

    PORT = 42069
    server_running = False
    connected = False

    def start_server(self):
        if self.server_running:
            return
        server_running = True
        self.btnHost.setEnabled(False)
        self.txtInIP.setText(socket.gethostbyname(socket.gethostname()))
        self.txtInIP.setReadOnly(True)
        self.txtOutStatus.clear()
        self.txtOutStatus.setText(f"Hosting Server on {socket.gethostbyname(socket.gethostname())}")
        # Connection Data
        HOST = socket.gethostbyname(socket.gethostname())
        # Starting Server
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind((HOST, self.PORT))
        server.listen()
        # Lists For Clients and Their Nicknames
        clients = []
        nicknames = []
        # Sending Messages To All Connected Clients
        def broadcast(message):
            for client in clients:
                client.send(message)
        # Handling Messages From Clients
        def handle(client):
            while True:
                try:
                    # Broadcasting Messages
                    message = client.recv(1024)
                    broadcast(message)
                except:
                    # Removing And Closing Clients
                    index = clients.index(client)
                    clients.remove(client)
                    client.close()
                    nickname = nicknames[index]
                    broadcast('{} left!'.format(nickname).encode('ascii'))
                    nicknames.remove(nickname)
                    break
        # Receiving / Listening Function
        def receive():
            while True:
                # Accept Connection
                client, address = server.accept()
                # Request And Store Nickname
                client.send('NICK'.encode('ascii'))
                nickname = client.recv(1024).decode('ascii')
                nicknames.append(nickname)
                clients.append(client)
                # Print And Broadcast Nickname
                broadcast("{} joined!".format(nickname).encode('ascii'))
                # Start Handling Thread For Client
                thread = threading.Thread(target=handle, args=(client,))
                thread.setDaemon(True)
                thread.start()
                if not server_running:
                    server.shutdown(socket.SHUT_RDWR)
                    server.close()
                    break
        server_thread = threading.Thread(target=receive)
        server_thread
        server_thread.start()
        self.connect_to_server()
        

    def stop_server(self):
        self.server_running = False
        self.btnHost.setEnabled(True)
        self.txtInIP.clear()
        self.txtInIP.setReadOnly(False)
        self.txtOutStatus.clear()

    def no_server(self):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Connection Failed")
        msg.setText("There is no Server with the provided IP")
        msg.setIcon(QtWidgets.QMessageBox.Critical)
        x = msg.exec_()

    def nick(self):
      text, ok = QtWidgets.QInputDialog.getText(self, "Nickname", "Enter your nickname:")
      if ok:
        return text.strip()

    nickname = "Null"
    client = client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def connect_to_server(self):
        self.connected = True
        self.btnConnect.setEnabled(False)
        self.btnHost.setEnabled(False)
        self.btnSend.setEnabled(True)
        self.btnDisconnect.setEnabled(True)
        # Choosing Nickname
        global nickname
        global client
        nickname = self.nick()
        # Connecting To Server
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            client.connect((self.txtInIP.text(), self.PORT))
        except:
            self.no_server()
            return
        # Listening to Server and Sending Nickname
        def receive():
            while True:
                try:
                    # Receive Message From Server
                    # If 'NICK' Send Nickname
                    message = client.recv(1024).decode('ascii')
                    if message == 'NICK':
                        client.send(nickname.encode('ascii'))
                    else:
                        self.txtOutChat.append(message)
                except:
                    # Close Connection When Error
                    self.txtOutStatus.setText("An error occured!")
                    client.close()
                    break
        # Sending Messages To Server
        # Starting Threads For Listening And Writing
        receive_thread = threading.Thread(target=receive)
        receive_thread.setDaemon(True)
        receive_thread.start()

    def send_to_server(self):
        message = '{}: {}'.format(nickname, self.txtInMsg.text())
        client.send(message.encode('ascii'))
        self.txtInMsg.clear()

    def disconnect(self):
        if self.txtInIP.text() is socket.gethostbyname(socket.gethostname()):
            self.stop_server()
        self.btnSend.setEnabled(False)
        self.txtInIP.setReadOnly(False)
        self.connected = False
        self.btnConnect.setEnabled(True)
        self.btnHost.setEnabled(True)
        self.btnDisconnect.setEnabled(False)
        self.txtOutStatus.clear()
    
    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


